package models;

import java.util.ArrayList;
import java.util.HashMap;

import csv.CSVEntity;
import csv.InvalidDataException;

/**
 * Représente une compétence
 */
public class Competence extends CSVEntity implements Cloneable {
	/**
	 * 
	 */
	private static final long	serialVersionUID	= -6576291860904112309L;
	private CompetenceCode		code;
	private ArrayList<String>	Names;
	
	/**
	 * @param code,
	 *            les codes compétences
	 * @param names,
	 *            les libellés d'une compétence dans plusieurs langues
	 */
	public Competence(CompetenceCode code, ArrayList<String> names) {
		super();
		super.setAutoGeneratedID(false);
		this.code = code;
		Names = names;
	}
	
	public Competence(String code, ArrayList<String> names) throws InvalidDataException {
		super();
		super.setAutoGeneratedID(false);
		Names = names;
		this.code = new CompetenceCode(code);
	}
	
	public CompetenceCode getCode() {
		return code;
	}
	
	public void setCode(CompetenceCode code) {
		this.code = code;
	}
	
	public void setCsvID(String ID) throws InvalidDataException {
		this.code = new CompetenceCode(ID);
	}
	
	public ArrayList<String> getNames() {
		return Names;
	}
	
	public void setNames(ArrayList<String> names) {
		Names = names;
	}
	
	public String toString() {
		return "[code=" + code + ", Names=" + Names + "]";
	}
	
	public String csvID() {
		return code.toString();
	}
	
	public HashMap<Class<? extends CSVEntity>, ArrayList<String>> getReferencedObjectsIDS() {
		return new HashMap<>();
	}
	
	@Override
	public void setReferencedObjects(HashMap<Class<? extends CSVEntity>, ArrayList<Object>> hashMap) {
	}
	
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (!super.equals(obj))
			return false;
		if (!(obj instanceof Competence))
			return false;
		Competence other = (Competence) obj;
		if (Names == null) {
			if (other.Names != null)
				return false;
		} else if (!Names.equals(other.Names))
			return false;
		if (code == null) {
			if (other.code != null)
				return false;
		} else if (!code.equals(other.code))
			return false;
		return true;
	}
	
	@Override
	public Object clone() {
		ArrayList<String> n = new ArrayList<>();
		for (String s : Names)
			n.add(s);
		Competence copy = null;
		try {
			copy = (Competence) super.clone();
		} catch (CloneNotSupportedException e1) {
			e1.printStackTrace();
		}
		copy.setNames(n);
		return copy;
	}
	
}

package csv;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;

/**
 * Classe de base pour toutes les entités.
 *
 */
public abstract class CSVEntity implements Serializable {
	
	/**
	 * 
	 */
	private static final long	serialVersionUID	= -3373058782953105989L;
	private boolean				attachedObject		= false;
	private boolean				autoGenaratedID		= true;
	
	public void setAutoGeneratedID(boolean auto) {
		this.autoGenaratedID = auto;
	}
	
	boolean AutoGeneratedID() {
		return autoGenaratedID;
	}
	
	void setAttached() {
		attachedObject = true;
	}
	
	void setAttached(boolean b) {
		attachedObject = b;
	}
	
	public boolean isAttached() {
		return attachedObject;
	}
	
	@SuppressWarnings("unchecked")
	protected static <E extends CSVEntity> ArrayList<E> castArrayList(
			HashMap<Class<? extends CSVEntity>, ArrayList<Object>> hashMap, Class<? extends CSVEntity> class1
	) {
		ArrayList<E> cast = new ArrayList<E>();
		if (hashMap.get(class1) != null)
			for (Object nObj : hashMap.get(class1)) {
				cast.add((E) nObj);
			}
		return cast;
	}
	
	public abstract String csvID();
	
	public abstract void setCsvID(String ID) throws InvalidDataException;
	

	protected abstract void setReferencedObjects(HashMap<Class<? extends CSVEntity>, ArrayList<Object>> hashMap);
	
	protected abstract HashMap<Class<? extends CSVEntity>, ArrayList<? extends CSVEntity>> getReferencedObjects();
	
	public boolean equals(Object o) {
		if (o == null)
			return false;
		if (!(o instanceof CSVEntity))
			return false;
		return (this.getClass() == o.getClass()) && ((CSVEntity) o).csvID().equals(this.csvID());
	}
	
	
	/*
	 * @Override protected void finalize() throws Throwable {
	 * System.out.println(this.getClass() + " : " + csvID() + " collected");
	 * super.finalize(); }
	 */
	
}

package csv;

import java.util.ArrayList;
import java.util.HashMap;

public abstract class CSVEntity {
	private boolean	attachedObject	= false;
	private boolean	autoGenaratedID	= true;
	
	public void setAutoGeneratedID(boolean auto) {
		autoGenaratedID = auto;
	}
	
	public boolean AutoGeneratedID() {
		return autoGenaratedID;
	}
	
	public void setAttached() {
		attachedObject = true;
	}
	
	public void setAttached(boolean b) {
		attachedObject = b;
	}
	
	public boolean isAttached() {
		return attachedObject;
	}
	
	@SuppressWarnings("unchecked")
	protected static <E> ArrayList<E> castArrayList(
			HashMap<Class<? extends CSVEntity>, ArrayList<Object>> hashMap, Class<? extends CSVEntity> class1
	) {
		ArrayList<E> cast = new ArrayList<E>();
		if (hashMap.get(class1) != null)
			for (Object nObj : hashMap.get(class1)) {
				cast.add((E) nObj);
			}
		return cast;
	}
	
	public abstract String csvID();
	
	public abstract void setCsvID(String ID) throws InvalidDataException;
	
	public abstract HashMap<Class<? extends CSVEntity>, ArrayList<String>> getReferencedObjectsIDS();
	
	public abstract void setReferencedObjects(HashMap<Class<? extends CSVEntity>, ArrayList<Object>> hashMap);
	
	public final boolean equals(Object o) {
		if (o == null)
			return false;
		return hashCode() == o.hashCode();
	}
	
	public final int hashCode() {
		return (this.getClass().getName() + ";;" + this.csvID()).hashCode();
	}
	
	protected final ArrayList<String> getIDS(ArrayList<? extends CSVEntity> ReferencedObjects) {
		ArrayList<String> ids = new ArrayList<String>();
		for (CSVEntity e : ReferencedObjects) {
			ids.add(e.csvID());
		}
		return ids;
	}
}

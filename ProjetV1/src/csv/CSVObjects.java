package csv;

import java.io.IOException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Set;
import java.util.function.Predicate;
import java.util.stream.Collectors;

import javax.cache.Cache;

/**
 * Fournit les méthodes de lecture / écriture des entités configurées dans
 * CSVModel.java
 * 
 * @param <E>
 *            Le type de l'objet
 */
public class CSVObjects<E extends CSVEntity> {
	
	private CSVDocument			doc;
	private CSVObjectLoader<E>	csvloader;
	private CSVObjectSaver<E>	csvsaver;
	private CSVObjectDeleter<E>	csvdeleter;
	private CSVConfig			config;
	private Class<E>			entityClass;
	
	/**
	 * Constructeur qui prend en paramètre la classe d'entités
	 * 
	 * @param c
	 * @throws IOException
	 */
	public CSVObjects(Class<E> c, CSVConfig config) throws CSVException {
		
		super();
		this.entityClass = c;
		this.config = config;
		try {
			this.doc = config.getDocument(c);
		} catch (IOException e) {
			throw new CSVException(e);
		}
		try {
			this.csvloader = new CSVObjectLoader<E>(c, config);
		} catch (IOException e) {
			throw new CSVException(e);
		}
		this.csvsaver = new CSVObjectSaver<E>(config);
		this.csvdeleter = new CSVObjectDeleter<E>(config);
	}
	
	/**
	 * Ajoute un objet non attaché et ses dépendances aux fichiers CSV. Les
	 * dépendances doivent exister dans la base de données.
	 * 
	 * @param e
	 * @throws IOException
	 * @throws CSVUpdateException
	 * @throws NumberFormatException
	 * @throws ParseException
	 * @throws CSVException
	 */
	public void add(E e) throws CSVException {
		if (e.isAttached()) {
			try {
				throw new CSVUpdateException("Object is already attached");
			} catch (CSVUpdateException e1) {
				throw new CSVException(e1);
			}
		}
		try {
			if (getByID(e.csvID()) != null) {
				throw new InvalidCSVException("Object with ID= " + e.csvID() + " already exists in " + doc.getPath());
			}
		} catch (NumberFormatException e1) {
			throw new CSVException(e1);
		}
		if (e.AutoGeneratedID()) {
			String generatedID = generateID();
			e.setCsvID(generatedID);
		}
		try {
			csvsaver.addObject(e);
		} catch (NumberFormatException | IOException | CSVUpdateException | ParseException e1) {
			throw new CSVException(e1);
		}
		config.getCSVCache().getCache(entityClass).put(e.csvID(), e);
	}
	
	/**
	 * Ajoute plusieurs objets
	 * 
	 * @param many
	 * @throws NumberFormatException
	 * @throws IOException
	 * @throws CSVUpdateException
	 * @throws ParseException
	 * @throws CSVException
	 */
	public void addMany(Iterable<E> many) throws CSVException {
		for (E e : many) {
			add(e);
		}
	}
	
	/**
	 * Supprime un objet et les occurences de son ID dans les associations.
	 * 
	 * @param e
	 * @throws CSVUpdateException
	 * @throws IOException
	 * @throws InvalidCSVException
	 */
	public void delete(E e) throws CSVException {
		try {
			csvdeleter.deleteObject(e);
			
		} catch (IOException | CSVUpdateException e1) {
			throw new CSVException(e1);
		}
		config.getCSVCache().getCache(entityClass).remove(e.csvID());
	}
	
	/**
	 * Supprime un objet puis le rajoute.
	 * 
	 * @param e
	 * @throws CSVUpdateException
	 * @throws IOException
	 * @throws NumberFormatException
	 * @throws ParseException
	 * @throws CSVException
	 */
	public void modify(E e) throws CSVException {
		try {
			csvdeleter.deleteObject(e, false);
		} catch (IOException | CSVUpdateException e1) {
			throw new CSVException(e1);
		}
		try {
			csvsaver.addObject(e);
		} catch (NumberFormatException | IOException | CSVUpdateException | ParseException e1) {
			throw new CSVException(e1);
		}
		config.getCSVCache().getCache(entityClass).put(e.csvID(), e);
	}
	
	/**
	 * @param ID
	 * @return Retourne un objet par son ID ou NULL si l'ID est introuvable.
	 * @throws IOException
	 * @throws NumberFormatException
	 * @throws ParseException
	 * @throws CSVException
	 */
	public E getByID(String ID) throws CSVException {
		E entity = null;
		
		if (config.getCSVCache().getCache(entityClass).containsKey(ID)) {
			return config.getCSVCache().getCache(entityClass).get(ID);
		}
		
		CSVLine line;
		try {
			line = doc.getLineByID(ID);
		} catch (IOException e1) {
			throw new CSVException(e1);
		}
		if (line == null) {
			return null;
		}
		try {
			entity = csvloader.createObject(line);
		} catch (NumberFormatException | IOException | ParseException e) {
			throw new CSVException(e);
		}
		config.getCSVCache().getCache(entityClass).put(ID, entity);
		return entity;
	}
	
	/**
	 * Retourne les objets filtrés par un prédicat
	 * 
	 * @param filter
	 * @return
	 * @throws NumberFormatException
	 * @throws IOException
	 * @throws ParseException
	 * @throws CSVException
	 */
	public ArrayList<E> getFiltered(Predicate<E> filter) throws CSVException {
		return GetFiltered(filter, null);
	}
	
	/**
	 * Retourne les objets filtrés par prédicat labmda et triés avec le
	 * comparateur fourni
	 * 
	 * @param filter
	 * @param c
	 * @return
	 * @throws NumberFormatException
	 * @throws IOException
	 * @throws ParseException
	 * @throws CSVException
	 */
	public ArrayList<E> GetFiltered(Predicate<E> filter, Comparator<E> c) throws CSVException {
		ArrayList<E> all = getAll();
		ArrayList<E> filtered = all.stream().filter(filter).collect(Collectors.toCollection(ArrayList::new));
		if (c == null)
			return filtered;
		else
			filtered.sort(c);
		return filtered;
	}
	
	/**
	 * Retourne tous les objets
	 * 
	 * @return
	 * @throws IOException
	 * @throws NumberFormatException
	 * @throws ParseException
	 * @throws CSVException
	 */
	public ArrayList<E> getAll() throws CSVException {
		Cache<String, E> cache = config.getCSVCache().getCache(entityClass);
		Set<String> ids = new HashSet<>();
		int idPosition = doc.getIdColumnPosition();
		try {
			for (CSVLine line : doc.getAll()) {
				E entity;
				if (cache.containsKey(line.get(idPosition)))
					entity = cache.get(line.get(idPosition));
				else {
					entity = csvloader.createObject(line);
					cache.put(entity.csvID(), entity);
				}
				ids.add(entity.csvID());
			}
		} catch (NumberFormatException | IOException | ParseException e) {
			throw new CSVException(e);
		}
		return new ArrayList<E>(cache.getAll(ids).values());
	}
	
	private String generateID() throws CSVException {
		try {
			if (doc.lineCount() == 0)
				return "1";
		} catch (IOException e) {
			throw new CSVException(e);
		}
		ArrayList<Integer> IDs;
		try {
			IDs = doc.getIDS();
		} catch (IOException e) {
			throw new CSVException(e);
		}
		int generatedID = Collections.max(IDs) + 1;
		return Integer.toString(generatedID);
	}
	
	@Override
	public String toString() {
		return "CSVObjects [doc=" + doc + ", entityClass=" + entityClass + "]";
	}
	
}

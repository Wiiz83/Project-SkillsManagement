package csv;

import java.io.IOException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.function.Predicate;
import java.util.stream.Collectors;

/**
 * Fournit les méthodes de lecture / écriture des entités configurées dans
 * CSVModel.java
 * 
 * @param <E>
 *            Le type de l'objet
 */
public class CSVObjects<E extends CSVEntity> {
	
	private CSVDocument			doc;
	private CSVObjectLoader<E>	csvloader;
	private CSVObjectSaver<E>	csvsaver;
	private CSVObjectDeleter<E>	csvdeleter;
	
	/**
	 * Constructeur qui prend en paramètre la classe d'entités
	 * 
	 * @param c
	 * @throws IOException
	 */
	public CSVObjects(Class<? extends CSVEntity> c) throws IOException {
		super();
		this.doc = new CSVDocument(c);
		this.csvloader = new CSVObjectLoader<E>(c);
		this.csvsaver = new CSVObjectSaver<E>(doc);
		this.csvdeleter = new CSVObjectDeleter<E>(doc);
	}
	
	private String generateID() throws InvalidDataException {
		if (doc.lineCount() == 0)
			return "1";
		ArrayList<Integer> IDs = doc.getIDS();
		int generatedID = Collections.max(IDs) + 1;
		return Integer.toString(generatedID);
		
	}
	
	/**
	 * Ajoute un objet non attaché et ses dépendances aux fichiers CSV. Les
	 * dépendances doivent exister dans la base de données.
	 * 
	 * @param e
	 * @throws IOException
	 * @throws InvalidCSVException
	 * @throws InvalidDataException
	 * @throws CSVUpdateException
	 * @throws NumberFormatException
	 * @throws ParseException
	 */
	public void add(E e) throws IOException, InvalidCSVException, InvalidDataException, CSVUpdateException,
			NumberFormatException, ParseException {
		if (e.isAttached()) {
			throw new CSVUpdateException("Object is already attached");
		}
		if (getByID(e.csvID()) != null) {
			throw new InvalidCSVException("Object with ID= " + e.csvID() + " already exists in " + doc.getPath());
		}
		if (e.AutoGeneratedID()) {
			String generatedID = generateID();
			e.setCsvID(generatedID);
		}
		csvsaver.addObject(e);
	}
	
	/**
	 * Ajoute plusieurs objets
	 * 
	 * @param many
	 * @throws NumberFormatException
	 * @throws IOException
	 * @throws InvalidCSVException
	 * @throws InvalidDataException
	 * @throws CSVUpdateException
	 * @throws ParseException
	 */
	public void addMany(Iterable<E> many) throws NumberFormatException, IOException, InvalidCSVException,
			InvalidDataException, CSVUpdateException, ParseException {
		for (E e : many) {
			add(e);
		}
	}
	
	/**
	 * @param ID
	 * @return Retourne un objet par son ID ou NULL si l'ID est introuvable.
	 * @throws IOException
	 * @throws InvalidCSVException
	 * @throws InvalidDataException
	 * @throws NumberFormatException
	 * @throws ParseException
	 */
	public E getByID(String ID)
			throws IOException, InvalidCSVException, InvalidDataException, NumberFormatException, ParseException {
		CSVLine line = doc.getLineByID(ID);
		if (line == null) {
			return null;
		}
		return csvloader.createObject(line);
	}
	
	/**
	 * Supprimer un objet et les occurences de son ID dans les associations.
	 * 
	 * @param e
	 * @throws CSVUpdateException
	 * @throws IOException
	 * @throws InvalidCSVException
	 */
	public void delete(E e) throws CSVUpdateException, IOException, InvalidCSVException {
		csvdeleter.deleteObject(e);
	}
	
	/**
	 * Supprime un objet puis le rajoute.
	 * 
	 * @param e
	 * @throws CSVUpdateException
	 * @throws IOException
	 * @throws InvalidCSVException
	 * @throws NumberFormatException
	 * @throws InvalidDataException
	 * @throws ParseException
	 */
	public void modify(E e) throws CSVUpdateException, IOException, InvalidCSVException, NumberFormatException,
			InvalidDataException, ParseException {
		csvdeleter.deleteObject(e, false);
		csvsaver.addObject(e);
	}
	
	/**
	 * Retourne les objets filtrés par une expression labmda
	 * 
	 * @param filter
	 * @return
	 * @throws NumberFormatException
	 * @throws IOException
	 * @throws InvalidCSVException
	 * @throws InvalidDataException
	 * @throws ParseException
	 */
	public ArrayList<E> GetFiltered(Predicate<E> filter)
			throws NumberFormatException, IOException, InvalidCSVException, InvalidDataException, ParseException {
		return GetFiltered(filter, null);
	}
	
	/**
	 * Retourne les objets filtrés par une expression labmda et triés avec le
	 * comparateur fourni
	 * 
	 * @param filter
	 * @param c
	 * @return
	 * @throws NumberFormatException
	 * @throws IOException
	 * @throws InvalidCSVException
	 * @throws InvalidDataException
	 * @throws ParseException
	 */
	public ArrayList<E> GetFiltered(Predicate<E> filter, Comparator<E> c)
			throws NumberFormatException, IOException, InvalidCSVException, InvalidDataException, ParseException {
		ArrayList<E> all = getAll();
		ArrayList<E> filtered = all.stream().filter(filter).collect(Collectors.toCollection(ArrayList::new));
		if (c == null)
			return filtered;
		else
			filtered.sort(c);
		return filtered;
	}
	
	/**
	 * Retourne tous les objets
	 * 
	 * @return
	 * @throws IOException
	 * @throws InvalidCSVException
	 * @throws InvalidDataException
	 * @throws NumberFormatException
	 * @throws ParseException
	 */
	public ArrayList<E> getAll()
			throws IOException, InvalidCSVException, InvalidDataException, NumberFormatException, ParseException {
		ArrayList<E> all = new ArrayList<>();
		for (CSVLine line : doc.getAll()) {
			all.add(csvloader.createObject(line));
		}
		return all;
	}
}
